//
//  CreateReviewViewController.swift
//  SentimentClassifier
//
//  Created by Ivana Mr≈°iƒá on 26.12.2020..
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import RxSwift
import RxCocoa
import RxKeyboard
import SkyFloatingLabelTextField

final class CreateReviewViewController: NLPViewController {

    // MARK: - IBOutlets

    @IBOutlet private weak var titleLabel: UILabel!
    @IBOutlet private weak var movieTitleTextField: SkyFloatingLabelTextField!
    @IBOutlet private weak var movieYearTextField: SkyFloatingLabelTextField!
    @IBOutlet private weak var reviewTitleTextField: SkyFloatingLabelTextField!
    @IBOutlet private weak var reviewTextView: UITextView!
    @IBOutlet private weak var submitButton: UIButton!

    @IBOutlet private weak var activtyIndicator: UIActivityIndicatorView!

    @IBOutlet private weak var scrollView: UIScrollView!

    // MARK: - Public properties

    var presenter: CreateReviewPresenterInterface!

    // MARK: - Private properties

    private let disposeBag = DisposeBag()

    // MARK: - Lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        configure()
        setupUI()
        hideKeyboardWhenTappedAround()
    }
}

// MARK: - CreateReviewViewInterface

extension CreateReviewViewController: CreateReviewViewInterface {

    func startLoading() {
        activtyIndicator?.startAnimating()
    }

    func stopLoading() {
        activtyIndicator.stopAnimating()
    }

    func reset() {
        reset(textField: movieTitleTextField)
        reset(textField: movieYearTextField)
        reset(textField: reviewTitleTextField)
        reviewTextView.text = ""
    }
}

// MARK: - Configuration

private extension CreateReviewViewController {

    func configure() {

        let searchMovieAction = movieTitleTextField.rx.controlEvent(.editingDidBegin)

        let output = CreateReview.ViewOutput(
            searchMovieAction: searchMovieAction.asSignal(),
            saveReviewAction: submitButton.rx.tap.asSignal(),
            data: reviewData
        )

        let input = presenter.configure(with: output)
        handle(movieData: input.movieData)
        handleKeyboard()
        handleMovieInfoTextFields()
        handleButtonEnabledState()
    }
}

// MARK: - UI setup

private extension CreateReviewViewController {

    func setupUI() {
        titleLabel.text = Strings.createReview
        setup(textField: movieTitleTextField, title: Strings.movieTitle)
        setup(textField: movieYearTextField, title: Strings.movieYear)
        setup(textField: reviewTitleTextField, title: Strings.reviewTitle)
        setupSubmitButton()
    }

    func setup(textField: SkyFloatingLabelTextField, title: String) {
        textField.placeholder = Strings.movieTitle
        textField.title = Strings.movieTitle
    }

    func setupSubmitButton() {
        submitButton.layer.cornerRadius = 25
        submitButton.setTitle(Strings.create, for: .normal)
    }
}

// MARK: - Binding setup

private extension CreateReviewViewController {

    var reviewData: Driver<(String?, String?, String?, String?)> {

        let text = reviewTextView.rx.text.asDriver().filter { !($0?.isEmpty ?? true) }

        return Driver.combineLatest(
            movieTitleTextField.rx.text.asDriver().startWith(""),
            movieYearTextField.rx.text.asDriver().startWith(""),
            reviewTitleTextField.rx.text.asDriver().startWith(""),
            text.startWith("")
        )
    }

    func handle(movieData: Driver<(title: String, year: String)>) {
        movieData
            .map { $0.title }
            .drive(onNext: { [unowned movieTitleTextField] in
                movieTitleTextField?.text = $0
                movieTitleTextField?.sendActions(for: .valueChanged)
            })
            .disposed(by: disposeBag)

        movieData
            .map { $0.year }
            .drive(onNext: { [unowned movieYearTextField] in
                movieYearTextField?.text = $0
                movieYearTextField?.sendActions(for: .valueChanged)
            })
            .disposed(by: disposeBag)

    }

    func handleKeyboard() {
        RxKeyboard.instance.visibleHeight
            .drive(onNext: { [scrollView] keyboardVisibleHeight in
                let height = keyboardVisibleHeight == 0 ? 0 : 200
                scrollView?.contentOffset.y = CGFloat(height)
            })
            .disposed(by: disposeBag)
    }

    func handleMovieInfoTextFields() {
        movieTitleTextField.rx.text
            .filter { $0?.isEmpty ?? true }
            .asDriver(onErrorDriveWith: .empty())
            .map { _ in () }
            .drive(onNext: { [unowned movieYearTextField] in movieYearTextField?.text = "" })
            .disposed(by: disposeBag)
    }

    func handleButtonEnabledState() {
        reviewData
            .map { !$0.isEmptyOrNil && !$1.isEmptyOrNil && !$2.isEmptyOrNil && !$3.isEmptyOrNil }
            .distinctUntilChanged()
            .drive(onNext: { [unowned submitButton] in
                submitButton?.alpha = $0 ? 1 : 0.5
                submitButton?.isEnabled = $0
            })
            .disposed(by: disposeBag)
    }
}

// MARK: - Helpers

private extension CreateReviewViewController {

    func reset(textField: UITextField) {
        textField.text = ""
        textField.sendActions(for: .valueChanged)
    }
}
