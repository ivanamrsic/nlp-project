//
//  CreateReviewViewController.swift
//  SentimentClassifier
//
//  Created by Ivana Mr≈°iƒá on 26.12.2020..
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import RxSwift
import RxCocoa
import SkyFloatingLabelTextField

final class CreateReviewViewController: NLPViewController {

    // MARK: - IBOutlets

    @IBOutlet private weak var titleLabel: UILabel!
    @IBOutlet private weak var movieTitleTextField: SkyFloatingLabelTextField!
    @IBOutlet private weak var movieYearTextField: SkyFloatingLabelTextField!
    @IBOutlet private weak var reviewTitleTextField: SkyFloatingLabelTextField!
    @IBOutlet private weak var reviewTextView: UITextView!
    @IBOutlet private weak var submitButton: UIButton!

    @IBOutlet private weak var activtyIndicator: UIActivityIndicatorView!

    // MARK: - Public properties

    var presenter: CreateReviewPresenterInterface!

    // MARK: - Private properties

    private let disposeBag = DisposeBag()

    // MARK: - Lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        configure()
        setupUI()
        activtyIndicator.isHidden = true
        hideKeyboardWhenTappedAround()
    }
}

// MARK: - CreateReviewViewInterface

extension CreateReviewViewController: CreateReviewViewInterface {

    func stopLoading() {
        activtyIndicator.isHidden = true
        activtyIndicator.stopAnimating()
    }
}

// MARK: - Configuration

private extension CreateReviewViewController {

    func configure() {

        let searchMovieAction = movieTitleTextField.rx.controlEvent(.editingDidBegin)

        let submitAction = submitButton.rx.tap.asSignal()
            .do(onNext: { [unowned activtyIndicator] in
                activtyIndicator?.startAnimating()
                activtyIndicator?.isHidden = false
            })
            .flatMap { [unowned self] in self.reviewData }

        let output = CreateReview.ViewOutput(
            searchMovieAction: searchMovieAction.asSignal(),
            saveReviewAction: submitAction
        )

        let input = presenter.configure(with: output)
        handle(movieData: input.movieData)
    }
}

// MARK: - UI setup

private extension CreateReviewViewController {

    func setupUI() {
        titleLabel.text = Strings.createReviewTitle
        movieTitleTextField.placeholder = Strings.movieTitle
        movieTitleTextField.title = Strings.movieTitle
        movieYearTextField.placeholder = Strings.movieYear
        movieYearTextField.title = Strings.movieYear
        reviewTitleTextField.placeholder = Strings.reviewTitle
        reviewTitleTextField.title = Strings.reviewTitle
        submitButton.setTitle(Strings.createReview, for: .normal)
    }
}

// MARK: - Binding setup

private extension CreateReviewViewController {

    var reviewData: Signal<ReviewData> {
        return Driver.combineLatest(
                movieTitleTextField.rx.text.asDriver(),
                movieYearTextField.rx.text.asDriver(),
                reviewTitleTextField.rx.text.asDriver(),
                reviewTextView.rx.text.asDriver()
            )
            .asSignal(onErrorSignalWith: .empty())
            .map { ReviewData(movieTitle: $0, movieYear: $1, reviewTitle: $2, reviewText: $3) }
    }

    func handle(movieData: Driver<(title: String, year: String)>) {
        movieData
            .map { $0.title }
            .drive(movieTitleTextField.rx.text)
            .disposed(by: disposeBag)

        movieData
            .map { $0.year }
            .drive(movieYearTextField.rx.text)
            .disposed(by: disposeBag)
    }
}
