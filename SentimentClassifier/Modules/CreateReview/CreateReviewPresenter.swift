//
//  CreateReviewPresenter.swift
//  SentimentClassifier
//
//  Created by Ivana Mr≈°iƒá on 26.12.2020..
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import RxSwift
import RxCocoa

final class CreateReviewPresenter {

    // MARK: - Private properties

    private unowned let view: CreateReviewViewInterface
    private let interactor: CreateReviewInteractorInterface
    private let wireframe: CreateReviewWireframeInterface

    private let movieRelay = BehaviorRelay<(title: String, year: String)>(value: ("", ""))

    private let disposeBag = DisposeBag()

    // MARK: - Lifecycle

    init(view: CreateReviewViewInterface, interactor: CreateReviewInteractorInterface, wireframe: CreateReviewWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - CreateReviewPresenterInterface

extension CreateReviewPresenter: CreateReviewPresenterInterface {

    func configure(with output: CreateReview.ViewOutput) -> CreateReview.ViewInput {

        let reviewData = handle(reviewData: output.data)
        let saveReview = handle(saveAction: output.saveReviewAction, reviewData: reviewData)

        handle(searchMovie: output.searchMovieAction)
        handle(saveReview: saveReview)
        return CreateReview.ViewInput(
            movieData: movieRelay.asDriver()
        )
    }
}

// MARK: - Binding setup

private extension CreateReviewPresenter {

    func handle(reviewData: Driver<(String?, String?, String?, String?)>) -> Signal<ReviewData> {
        return reviewData
            .asSignal(onErrorSignalWith: .empty())
            .compactMap { ($0, $1, $2, $3) }
            .map {
                ReviewData(
                    movieTitle: $0,
                    movieYear: $1,
                    reviewTitle: $2,
                    reviewText: $3
                )
            }
    }

    func handle(saveAction: Signal<Void>, reviewData: Signal<ReviewData>) -> Signal<ReviewData> {
        saveAction
            .withLatestFrom(
                reviewData,
                resultSelector: { (_, review) in review }
            )
            .do(onNext: { [unowned view] _ in view.startLoading() })
    }

    func handle(searchMovie: Signal<Void>) {
        searchMovie.emit(onNext: { [unowned wireframe, unowned self] in
                wireframe.searchMovies(delegate: self)
            })
            .disposed(by: disposeBag)
    }

    func handle(saveReview: Signal<ReviewData>) {

        let alert = wireframe.showCreatedReviewAlert(with: Strings.reviewCreated, okMessage: Strings.ok)

        saveReview
            .asDriver(onErrorDriveWith: .empty())
            .flatMap { [unowned interactor] in interactor.save(reviewData: $0) }
            .map { _ in () }
            .do(onNext: { [unowned view] in view.stopLoading() })
            .flatMap { alert.asDriver(onErrorDriveWith: .empty()) }
            .drive(onNext: { [unowned view, unowned wireframe] in
                wireframe.dismiss()
                view.reset()
            })
            .disposed(by: disposeBag)
    }
}

// MARK: - SearchResultDelegate

extension CreateReviewPresenter: SearchResultDelegate {

    func process(result: SearchResponse.Movie) {
        movieRelay.accept((result.title, result.year))
    }
}
