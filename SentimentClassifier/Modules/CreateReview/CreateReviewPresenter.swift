//
//  CreateReviewPresenter.swift
//  SentimentClassifier
//
//  Created by Ivana Mr≈°iƒá on 26.12.2020..
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import RxSwift
import RxCocoa

final class CreateReviewPresenter {

    // MARK: - Private properties -

    private unowned let view: CreateReviewViewInterface
    private let interactor: CreateReviewInteractorInterface
    private let wireframe: CreateReviewWireframeInterface

    private let movieRelay = BehaviorRelay<(title: String, year: String)>(value: ("", ""))

    private let disposeBag = DisposeBag()

    // MARK: - Lifecycle

    init(view: CreateReviewViewInterface, interactor: CreateReviewInteractorInterface, wireframe: CreateReviewWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - CreateReviewPresenterInterface -

extension CreateReviewPresenter: CreateReviewPresenterInterface {

    func configure(with output: CreateReview.ViewOutput) -> CreateReview.ViewInput {
        handle(searchMovie: output.searchMovieAction)
        handle(saveReview: output.saveReviewAction)
        return CreateReview.ViewInput(
            movieData: movieRelay.asDriver()
        )
    }
}

// MARK: - Binding setup

private extension CreateReviewPresenter {

    func handle(searchMovie: Signal<Void>) {
        searchMovie.emit(onNext: { [unowned wireframe, unowned self] in
                wireframe.searchMovies(delegate: self)
            })
            .disposed(by: disposeBag)
    }

    func handle(saveReview: Signal<ReviewData>) {
        saveReview
            .asDriver(onErrorDriveWith: .empty())
            .flatMap { [unowned interactor] in interactor.save(reviewData: $0) }
            .drive(onNext: { [unowned wireframe, unowned view] didSave in

                view.stopLoading()
                view.reset()

                if didSave { wireframe.dismiss() }
            })
            .disposed(by: disposeBag)
    }
}

// MARK: - SearchResultDelegate

extension CreateReviewPresenter: SearchResultDelegate {

    func process(result: SearchResponse.Movie) {
        movieRelay.accept((result.title, result.year))
    }
}
