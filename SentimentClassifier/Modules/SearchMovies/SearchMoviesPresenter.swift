//
//  SearchMoviesPresenter.swift
//  SentimentClassifier
//
//  Created by Ivana Mršić on 26.12.2020..
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import RxSwift
import RxCocoa

final class SearchMoviesPresenter {

    // MARK: - Private properties

    private unowned let view: SearchMoviesViewInterface
    private let interactor: SearchMoviesInteractorInterface
    private let wireframe: SearchMoviesWireframeInterface

    private let delegate: SearchResultDelegate

    private let disposeBag = DisposeBag()

    // MARK: - Lifecycle

    init(view: SearchMoviesViewInterface, interactor: SearchMoviesInteractorInterface, wireframe: SearchMoviesWireframeInterface, delegate: SearchResultDelegate) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
        self.delegate = delegate
    }
}

// MARK: - SearchMoviesPresenterInterface -

extension SearchMoviesPresenter: SearchMoviesPresenterInterface {

    func configure(with output: SearchMovies.ViewOutput) -> SearchMovies.ViewInput {
        let items = handle(inputText: output.inputText)
        return SearchMovies.ViewInput(
            items: items
        )
    }
}

// MARK: - Binding setup

private extension SearchMoviesPresenter {

    func handle(inputText: Driver<String?>) -> Driver<[TableCellItem]> {
        return inputText.compactMap { $0 }
            .filter { $0.count > 1 }
            .distinctUntilChanged()
            .debounce(.milliseconds(300))
            .do(onNext: { [unowned view] _ in view.showLoading() })
            .flatMap { [unowned interactor, unowned view] in
                interactor.search(input: $0)
                    .do(onError: { [unowned view] _ in view.hideLoading() })
                    .asDriver(onErrorDriveWith: .just(SearchResponse.empty))
            }
            .do(onNext: { [unowned view] _ in view.hideLoading() })
            .map { [unowned self] in self.createCellItems(from: $0.search) }
    }
}

// MARK: - Items creation

private extension SearchMoviesPresenter {

    func createCellItems(from movies: [SearchResponse.Movie]) -> [TableCellItem] {
        movies.map { [unowned self] movie in
            let didSelect: () -> Void = { [unowned self] in
                self.delegate.process(result: movie)
                self.wireframe.dismiss()
            }
            return SearchResultCellItem(movie: movie, didSelect: didSelect)
        }
    }
}
