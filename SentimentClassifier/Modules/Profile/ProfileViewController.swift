//
//  ProfileViewController.swift
//  SentimentClassifier
//
//  Created by Ivana Mr≈°iƒá on 26.12.2020..
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import RxSwift
import RxCocoa

final class ProfileViewController: NLPViewController {

    // MARK: - IBOutlets

    @IBOutlet private weak var choosePhotoButton: UIButton!

    @IBOutlet private weak var usernameTitleLabel: UILabel!
    @IBOutlet private weak var usernameLabel: UILabel!

    @IBOutlet private weak var emailTitleLabel: UILabel!
    @IBOutlet private weak var emailLabel: UILabel!

    @IBOutlet private weak var ratingsCountTitleLabel: UILabel!
    @IBOutlet private weak var ratingsCountLabel: UILabel!

    @IBOutlet private weak var ratingsSectionLabel: UILabel!
    @IBOutlet private weak var createReviewButton: UIButton!
    @IBOutlet private weak var filterReviewsButton: UIButton!

    @IBOutlet private weak var tableView: UITableView! {
        didSet {
            tableView.registerNib(cellOfType: ReviewTableViewCell.self)
        }
    }
    
    // MARK: - Public properties

    var presenter: ProfilePresenterInterface!

    // MARK: - Private properties

    private lazy var dataSourceDelegate: TableDataSourceDelegate = {
        return TableDataSourceDelegate(tableView: self.tableView)
    }()

    private let disposeBag = DisposeBag()

    // MARK: - Lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        configure()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        setupUI()
    }
}

// MARK: - ProfileViewInterface

extension ProfileViewController: ProfileViewInterface {
}

// MARK: - Configuration

private extension ProfileViewController {

    func configure() {

        let output = Profile.ViewOutput(
            choosePhotoAction: choosePhotoButton.rx.tap.asSignal(),
            createReviewAction: createReviewButton.rx.tap.asSignal(),
            filterReviewsAction: filterReviewsButton.rx.tap.asSignal(),
            viewWillAppear: rx.viewWillAppear.asSignal()
        )

        let input = presenter.configure(with: output)

        handle(items: input.items)
        handle(image: input.image)
        handle(reviewCount: input.reviewCount)
    }
}

// MARK: - UI Setup

private extension ProfileViewController {

    func setupUI() {
        usernameTitleLabel.text = Strings.usernameTitle
        emailTitleLabel.text = Strings.emailTitle
        ratingsCountTitleLabel.text = Strings.ratingsCountTitle
        ratingsSectionLabel.text = Strings.ratingsTitle
    }
}

// MARK: - Binding Setup

private extension ProfileViewController {

    func handle(items: Driver<[TableCellItem]>) {
        items
            .drive(dataSourceDelegate.rx.items)
            .disposed(by: disposeBag)
    }

    func handle(image: Driver<ProfilePhoto>) {

        let setImage: (ProfilePhoto) -> Void = { [unowned choosePhotoButton] in
            let image = $0.image.withRenderingMode(.alwaysOriginal)
            choosePhotoButton?.setImage(image, for: .normal)
        }

        image.drive(onNext: setImage)
            .disposed(by: disposeBag)
    }

    func handle(reviewCount: Driver<Int>) {
        reviewCount
            .map { String($0) }
            .drive(ratingsCountLabel.rx.text)
            .disposed(by: disposeBag)
    }
}
