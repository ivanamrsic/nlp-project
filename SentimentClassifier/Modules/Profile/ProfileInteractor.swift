//
//  ProfileInteractor.swift
//  SentimentClassifier
//
//  Created by Ivana Mr≈°iƒá on 26.12.2020..
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation
import RxSwift
import RxCocoa
import CoreData

final class ProfileInteractor {
}

// MARK: - ProfileInteractorInterface

extension ProfileInteractor: ProfileInteractorInterface {

    var profilePhoto: Driver<ProfilePhoto> {
        return UserStoreManager.profilePhotoDriver
    }

    var username: Driver<String?> {
        return UserStoreManager.usernameDriver
    }

    var email: Driver<String?> {
        return UserStoreManager.emailDriver
    }

    func fetchReviews() -> Single<[Review]> {

        return Single.create { observer -> Disposable in

            let request: NSFetchRequest = Review.fetchRequest()

            do {
                let reviews = try PersistanceManager.context.fetch(request)
                reviews.forEach { review in
                    guard let text = review.reviewText else { return }
                    review.sentiment = ClassifierManager.shared.classify(text: text)
                }
                observer(.success(reviews))
            } catch (let error) {
                observer(.error(error))
            }

            return Disposables.create { }
        }
    }

    func delete(review: Review) {
        PersistanceManager.context.delete(review)
        PersistanceManager.saveContext()
    }

    func deleteAllReviews() -> Single<Void> {

        return Single.create { (observer) -> Disposable in

            let deleteRequest = NSBatchDeleteRequest(fetchRequest: Review.fetchRequest())

            do {
                try PersistanceManager.context.execute(deleteRequest)
                PersistanceManager.context.reset()
                PersistanceManager.saveContext()
                observer(.success(()))
            } catch let error as NSError {
                observer(.error(error))
            }

            return Disposables.create { }
        }

    }
}
