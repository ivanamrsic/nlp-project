//
//  ProfileWireframe.swift
//  SentimentClassifier
//
//  Created by Ivana Mršić on 26.12.2020..
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import RxSwift
import RxCocoa

final class ProfileWireframe: BaseWireframe {

    // MARK: - Private properties

    private let storyboard = UIStoryboard.profile

    // MARK: - Module setup

    init() {
        let moduleViewController = storyboard.instantiateViewController(ofType: ProfileViewController.self)
        super.init(viewController: moduleViewController)
        
        let interactor = ProfileInteractor()
        let presenter = ProfilePresenter(view: moduleViewController, interactor: interactor, wireframe: self)
        moduleViewController.presenter = presenter
    }

}

// MARK: - ProfileWireframeInterface

extension ProfileWireframe: ProfileWireframeInterface {

    func openChoosePhoto() {
        navigationController?.presentWireframe(ChoosePhotoWireframe())
    }

    func openCreateReview() -> Signal<Void> {
        let navController = UINavigationController()
        let wireframe = CreateReviewWireframe()
        navController.setRootWireframe(wireframe)
        navigationController?.present(navController, animated: true, completion: nil)

        return wireframe.viewController.rx.viewWillDisappear.asSignal()
    }

    func openFilterReviews(with delegate: FilterDelegate) {
        navigationController?.presentWireframe(FilterReviewsWireframe(delegate: delegate))
    }

    func deleteAlert(with title: String, message: String, okMessage: String, cancelMessage: String) -> Single<UIAlertAction.Style> {

        return Single<UIAlertAction.Style>.create { [unowned viewController] observer -> Disposable in

            let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)

            let okAction =
                UIAlertAction(
                    title: okMessage,
                    style: .default,
                    handler: { _ in observer(.success(.default)) }
                )

            let cancelAction =
                UIAlertAction(
                    title: cancelMessage,
                    style: .destructive,
                    handler: { _ in observer(.success(.destructive)) }
                )

            alert.addAction(okAction)
            alert.addAction(cancelAction)

            viewController.present(alert, animated: true, completion: nil)

            return Disposables.create { }
        }
    }
}
