//
//  ProfilePresenter.swift
//  SentimentClassifier
//
//  Created by Ivana Mr≈°iƒá on 26.12.2020..
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import RxSwift
import RxCocoa

final class ProfilePresenter {

    // MARK: - Private properties

    private unowned let view: ProfileViewInterface
    private let interactor: ProfileInteractorInterface
    private let wireframe: ProfileWireframeInterface

    private let filtersRelay = BehaviorRelay<[ClassifierResultScale]>(value: ClassifierResultScale.resultPossiblities)

    private let disposeBag = DisposeBag()

    // MARK: - Lifecycle

    init(view: ProfileViewInterface, interactor: ProfileInteractorInterface, wireframe: ProfileWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - ProfilePresenterInterface

extension ProfilePresenter: ProfilePresenterInterface {

    func configure(with output: Profile.ViewOutput) -> Profile.ViewInput {
        handle(filterReviews: output.filterReviewsAction)
        handle(choosePhoto: output.choosePhotoAction)
        let refresh = handle(createReview: output.createReviewAction)

        let items = createItems(with: Signal.merge(refresh, output.viewWillAppear))

        return Profile.ViewInput(
            items: items,
            image: interactor.profilePhoto,
            reviewCount: items.map { $0.count }
        )
    }
}

// MARK: - Binding Setup

private extension ProfilePresenter {

    func handle(choosePhoto: Signal<Void>) {
        choosePhoto.emit(onNext: { [unowned wireframe] in
                wireframe.openChoosePhoto()
            })
            .disposed(by: disposeBag)
    }

    func handle(createReview: Signal<Void>) -> Signal<Void> {
        return createReview.flatMap { [unowned wireframe] in wireframe.openCreateReview() }
    }

    func handle(filterReviews: Signal<Void>) {
        filterReviews.emit(onNext: { [unowned self, unowned wireframe] in
                wireframe.openFilterReviews(with: self)
            })
            .disposed(by: disposeBag)
    }
}

// MARK: - Item creation

private extension ProfilePresenter {

    func createItems(with refresh: Signal<Void>) -> Driver<[TableCellItem]> {

        let reviews = refresh.flatMap { [unowned interactor] in
            interactor.fetchReviews().asDriver(onErrorDriveWith: .empty())
        }
        .asDriver(onErrorDriveWith: .empty())


        return Driver.combineLatest(reviews, filtersRelay.asDriver(), resultSelector: {
            (reviews, filters) -> [Review] in
            return reviews.filter { review in
                return filters.contains(where: { $0.description == review.sentiment })
            }
        })
            .map { $0.map { review in ReviewTableCellItem(review: review) } }
    }
}

extension ProfilePresenter: FilterDelegate {

    var currentFilters: [ClassifierResultScale] {
        return filtersRelay.value
    }

    func process(sentimentFilters: [ClassifierResultScale]) {
        filtersRelay.accept(sentimentFilters)
    }
}
