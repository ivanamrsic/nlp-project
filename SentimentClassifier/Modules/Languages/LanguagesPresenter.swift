//
//  LanguagesPresenter.swift
//  nlp
//
//  Created by Ivana Mršić on 19.11.2020..
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import RxSwift
import RxCocoa
import NaturalLanguage

final class LanguagesPresenter {

    // MARK: - Private properties

    private unowned let view: LanguagesViewInterface
    private let interactor: LanguagesInteractorInterface
    private let wireframe: LanguagesWireframeInterface

    // MARK: - Lifecycle

    init(view: LanguagesViewInterface, interactor: LanguagesInteractorInterface, wireframe: LanguagesWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - LanguagesPresenterInterface

extension LanguagesPresenter: LanguagesPresenterInterface {

    func configure(with output: Languages.ViewOutput) -> Languages.ViewInput {
        
        let result = handle(inputText: output.inputText, refresh: output.viewWillAppear)

        let toOutput: (LanguagePossibility?) -> ReadableLanguagePossibility? = { lang in
            guard let lang = lang else { return nil }
            return (lang.language.localized, lang.pct)
        }

        let secondPossibility = result.map { $0.count > 0 ? $0[1] : nil }
        let thirdPossibility = result.map { $0.count > 1 ? $0[2] : nil }

        return Languages.ViewInput(
            firstPossibleLanguages: result.map { $0.first }.map(toOutput),
            secondPossibleLanguages: secondPossibility.map(toOutput),
            thirdPossibleLanguages: thirdPossibility.map(toOutput)
        )
    }
}

// MARK: - Binding Setup

private extension LanguagesPresenter {
    
    func handle(
        inputText: Driver<String?>,
        refresh: Signal<Void>
        ) -> Driver<[LanguagePossibility]> {
        let language = inputText.compactMap { [unowned interactor] in interactor.getLanguage(for: $0) }
        return Driver.combineLatest(
            language,
            refresh.asDriver(onErrorDriveWith: .empty()),
            resultSelector: { (first, second) in return first }
        )
    }
}
