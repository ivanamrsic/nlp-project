//
//  LanguagesPresenter.swift
//  nlp
//
//  Created by Ivana Mršić on 19.11.2020..
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import RxSwift
import RxCocoa

final class LanguagesPresenter {

    // MARK: - Private properties -

    private unowned let view: LanguagesViewInterface
    private let interactor: LanguagesInteractorInterface
    private let wireframe: LanguagesWireframeInterface

    // MARK: - Lifecycle -

    init(view: LanguagesViewInterface, interactor: LanguagesInteractorInterface, wireframe: LanguagesWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - Extensions -

extension LanguagesPresenter: LanguagesPresenterInterface {

    func configure(with output: Languages.ViewOutput) -> Languages.ViewInput {
        
        let result = handle(inputText: output.inputText)
        
        return Languages.ViewInput(
            result: result
        )
    }

}

private extension LanguagesPresenter {
    
    func handle(inputText: Driver<String?>) -> Driver<String> {
        return inputText.map { [unowned self] in self.processInputText(text: $0) }
    }
}

private extension LanguagesPresenter {
    
    
    func processInputText(text: String?) -> String {
        
        guard let text = text, text.count > 0 else {
            return ""
        }
                
        let tagger = NSLinguisticTagger(tagSchemes: [.language], options: 0)
        tagger.string = text
        
        let lang = tagger.tag(at: 0, unit: .word, scheme: .language, tokenRange: nil)
        
        guard let langRawValue = lang?.rawValue else {
            return ""
        }
        
        return langRawValue == "und" ? "👀" : flag(country: (langRawValue.uppercased()))
    }
    
    func flag(country:String) -> String {
        
        if country == "EN" {
            return "🇬🇧"
        }
        
        let base = 127397
        var usv = String.UnicodeScalarView()
        for i in country.utf16 {
            usv.append(UnicodeScalar(base + Int(i))!)
        }
        return String(usv)
    }
    
}
